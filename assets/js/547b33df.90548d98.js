"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[268],{92969:e=>{e.exports=JSON.parse('{"functions":[],"properties":[{"name":"unlock","desc":"`br.unlock` is a table containing Lua unlocker compatibility mappings\\nand functions. It is implemented for each unlocker in `/Unlockers`.","lua_type":"table","tags":["unlocking"],"source":{"line":23,"path":"BadRotations.lua"}},{"name":"data","desc":"TODO","lua_type":"table","source":{"line":29,"path":"BadRotations.lua"}},{"name":"data.settings","desc":"TODO","lua_type":"table","source":{"line":35,"path":"BadRotations.lua"}},{"name":"addonName","desc":"","lua_type":"string","ignore":true,"source":{"line":41,"path":"BadRotations.lua"}},{"name":"deadPet","desc":"Global boolean to conditionally handle when the player\'s pet is dead.\\n```lua\\nif br.deadPet and cast.able.revivePet() then\\n\\tcast.revivePet(\\"player\\")\\nend\\n```","lua_type":"boolean","source":{"line":64,"path":"BadRotations.lua"}}],"types":[{"name":"castPosition","desc":"TODO","fields":[{"name":"x","lua_type":"number","desc":"x coordinate of the cast position"},{"name":"y","lua_type":"number","desc":"y coordinate of the cast position"},{"name":"z","lua_type":"number","desc":"z coordinate of the cast position"}],"source":{"line":51,"path":"BadRotations.lua"}}],"name":"br","desc":"`br` is the global table which implements the BadRotations API.\\nDue to its unavoidable size, complexity, and mutability, its\\nmembers are varied and logically defined within many files.\\n\\nIn this documentation, *some* members may be left undocumented\\nfor brevity. This is not to say that they are not important, but\\nrather that they are internal or not intended for public use. If\\nyou find yourself using an undocumented member, please consider\\nopening an issue on GitHub to request that it be documented.","source":{"line":13,"path":"BadRotations.lua"}}')}}]);